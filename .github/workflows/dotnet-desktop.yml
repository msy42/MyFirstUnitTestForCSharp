name: .NET Framework Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: ConsoleApp\ConsoleApp.sln                             # ソリューション名 (例: MyWpfApp.sln)。
      Test_Project_Path: ConsoleApp.Test\ConsoleApp.Test.csproj            # テストプロジェクトのパス (例: MyWpfApp.Tests\MyWpfApp.Tests.csproj)。
     
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # MSBuildをセットアップして、.NET Frameworkをビルド
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # 必要に応じてNuGetをセットアップ
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    # ソリューションの復元 (.NET Framework プロジェクトの NuGet パッケージを復元)
    - name: Restore NuGet packages
      run: nuget restore $env:Solution_Name

    # ソリューションをビルド (.NET Framework)
    - name: Build solution
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # xunit.runner.console をダウンロードしてテストを実行
    - name: Download and run xUnit Console Runner
      run: |
        # xunit.runner.console の zip ファイルをダウンロード
        Invoke-WebRequest -Uri https://github.com/xunit/xunit/releases/download/v2.4.1/xunit.console.2.4.1.zip -OutFile xunit.console.zip
        Expand-Archive -Path xunit.console.zip -DestinationPath xunit_console

        # xunit.console.exe を使用してテストを実行
        ./xunit_console/xunit.console.exe $env:Test_Project_Path\bin\$env:Configuration\net48\ConsoleApp.Test.dll
      env:
        Configuration: ${{ matrix.configuration }}

    # アプリケーションの復元 (必要に応じて)
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Base64でエンコードされたPFXをデコードし、サイン用の証明書を保存
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Windows Application Packagingプロジェクトをビルドしてパッケージを作成 (.NET Frameworkでも同様)
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # PFX証明書を削除
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # MSIXパッケージのアップロード
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
